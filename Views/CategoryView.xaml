<UserControl 
    x:Class="LuxuryCarRental.Views.CategoryView"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:vm="clr-namespace:LuxuryCarRental.ViewModels"
    mc:Ignorable="d"
    d:DesignHeight="600"
    d:DesignWidth="900"
    Background="{StaticResource LightBackgroundBrush}">

    <UserControl.Resources>

        <!-- VERY LIGHT GRAY for alternating DataGrid rows -->
        <SolidColorBrush x:Key="VeryLightGrayBrush" Color="#F7F7F7"/>

        <!-- CATEGORY DATA GRID HEADER STYLE: 
         Teal background (PrimaryBrush), white text, centered, 32px high -->
        <Style x:Key="CategoryDataGridHeaderStyle" TargetType="DataGridColumnHeader">
            <Setter Property="Background" Value="{StaticResource PrimaryBrush}" />
            <Setter Property="Foreground" Value="White" />
            <Setter Property="FontWeight" Value="SemiBold" />
            <Setter Property="HorizontalContentAlignment" Value="Left" />
            <Setter Property="Height" Value="32" />
        </Style>

        <!-- (Optional) If you do not already have PrimaryBrush / LightBackgroundBrush / CardBackgroundBrush 
         defined in your global Styles.xaml, you can define them here as well: 
         Just make sure they match the palette used in CatalogView, so your app stays consistent. -->

        <!-- Teal Accent Color -->
        <SolidColorBrush x:Key="PrimaryBrush" Color="#007ACC"/>

        <!-- Very pale gray background for the page and for filter‐row sub‐cards -->
        <SolidColorBrush x:Key="LightBackgroundBrush" Color="#F0F0F0"/>

        <!-- Pure white background for “cards” -->
        <SolidColorBrush x:Key="CardBackgroundBrush" Color="White"/>

        <!-- If you do not have PrimaryButton/SecondaryButton styles elsewhere, you can define minimal versions here.
         Your CatalogView probably already defines these in Styles.xaml; 
         if not, uncomment and adjust the colors as desired:

    <Style x:Key="PrimaryButton" TargetType="Button">
      <Setter Property="Background" Value="{StaticResource PrimaryBrush}"/>
      <Setter Property="Foreground" Value="White"/>
      <Setter Property="FontWeight" Value="SemiBold"/>
      <Setter Property="BorderBrush" Value="{StaticResource PrimaryBrush}"/>
      <Setter Property="BorderThickness" Value="1"/>
      <Setter Property="Padding" Value="4,2"/>
      <Setter Property="CornerRadius" Value="4"/>
    </Style>

    <Style x:Key="SecondaryButton" TargetType="Button">
      <Setter Property="Background" Value="White"/>
      <Setter Property="Foreground" Value="{StaticResource PrimaryBrush}"/>
      <Setter Property="FontWeight" Value="SemiBold"/>
      <Setter Property="BorderBrush" Value="{StaticResource PrimaryBrush}"/>
      <Setter Property="BorderThickness" Value="1"/>
      <Setter Property="Padding" Value="4,2"/>
      <Setter Property="CornerRadius" Value="4"/>
    </Style>
    -->

    </UserControl.Resources>

    <Grid Margin="16">
        <Grid.RowDefinitions>
            <!-- (1) Section Title at the top -->
            <RowDefinition Height="Auto"/>
            <!-- (2) The white card that contains both filters & DataGrid -->
            <RowDefinition Height="*"/>
            <!-- (3) (Optional) You could place a footer or spacing here if you want -->
        </Grid.RowDefinitions>

        <!-- ────────────────────────────────────────────────────────────────── -->
        <!-- 1) SECTION TITLE (“Category View”)                               -->
        <!--    Using the same SectionTitleText style (teal, bold, 18pt).    -->
        <TextBlock
            Grid.Row="0"
            Text="Category View"
            Style="{StaticResource SectionTitleText}"
            Margin="0,0,0,12" />

        <!-- ────────────────────────────────────────────────────────────────── -->
        <!-- 2) MAIN CARD PANEL (white background, shadow, rounded corners)    -->
        <Border
            Grid.Row="1"
            Style="{StaticResource CardPanel}"
            Padding="16"
            Background="{StaticResource CardBackgroundBrush}"
            CornerRadius="8">

            <Grid>
                <Grid.RowDefinitions>
                    <!-- (2A) Filter Row (combo‐boxes) -->
                    <RowDefinition Height="Auto"/>
                    <!-- (2B) DataGrid -->
                    <RowDefinition Height="*"/>
                    <!-- (2C) Refresh Button (optional in case you want it inside the card) -->
                    <RowDefinition Height="Auto"/>
                </Grid.RowDefinitions>

                <!-- ────────── (2A) FILTER ROW ────────── -->
                <!-- Background and padding to make it feel “embedded” -->
                <Border
                    Grid.Row="0"
                    Background="{StaticResource LightBackgroundBrush}"
                    CornerRadius="4"
                    Padding="8"
                    Margin="0,0,0,12">
                    <StackPanel Orientation="Horizontal" VerticalAlignment="Center" >

                        <!-- Category Dropdown -->
                        <TextBlock
                            Text="Category:"
                            VerticalAlignment="Center"
                            Foreground="{StaticResource PrimaryBrush}"
                            FontWeight="SemiBold"
                            Margin="0,0,8,0"/>
                        <ComboBox
                            Width="140"
                            ItemsSource="{Binding Categories}"
                            SelectedItem="{Binding SelectedCategory, Mode=TwoWay}"
                            Margin="0,0,16,0"/>

                        <!-- Availability Dropdown -->
                        <TextBlock
                            Text="Availability:"
                            VerticalAlignment="Center"
                            Foreground="{StaticResource PrimaryBrush}"
                            FontWeight="SemiBold"
                            Margin="0,0,8,0"/>
                        <ComboBox
                            Width="120"
                            ItemsSource="{Binding AvailabilityOptions}"
                            SelectedItem="{Binding SelectedAvailability, Mode=TwoWay}"
                            Margin="0,0,16,0"/>

                        <!-- Sort Dropdown -->
                        <TextBlock
                            Text="Sort by:"
                            VerticalAlignment="Center"
                            Foreground="{StaticResource PrimaryBrush}"
                            FontWeight="SemiBold"
                            Margin="0,0,8,0"/>
                        <ComboBox
                            Width="160"
                            ItemsSource="{Binding SortOptions}"
                            SelectedItem="{Binding SelectedSortOption, Mode=TwoWay}"/>
                    </StackPanel>
                </Border>

                <!-- ────────── (2B) DATA GRID ────────── -->
                <!-- Styling the DataGrid header to match the teal accent and removing unnecessary lines -->
                <DataGrid
        Grid.Row="1"
        ItemsSource="{Binding Vehicles}"
        AutoGenerateColumns="False"
        CanUserAddRows="False"
        IsReadOnly="True"
        RowHeight="64"
        RowHeaderWidth="0"
        HeadersVisibility="Column"
        GridLinesVisibility="None"
        AlternatingRowBackground="{StaticResource VeryLightGrayBrush}"
        RowBackground="White"
        ColumnHeaderHeight="32"
        ColumnHeaderStyle="{StaticResource CategoryDataGridHeaderStyle}"
        Margin="0,0,0,12"
        VirtualizingPanel.IsVirtualizing="True"
        VirtualizingPanel.VirtualizationMode="Recycling">

                    <DataGrid.Resources>
                        <!-- 1) Add a default cell padding so any text in cells has 8px of horizontal padding -->
                        <Style TargetType="DataGridCell">
                            <Setter Property="Padding" Value="8,0" />
                        </Style>
                        <!-- 2) Add a default header padding so headers also have horizontal breathing room -->
                        <Style TargetType="DataGridColumnHeader">
                            <Setter Property="Padding" Value="8,0" />
                        </Style>
                    </DataGrid.Resources>

                    <DataGrid.Columns>
                        <!-- (B1) IMAGE COLUMN -->
                        <DataGridTemplateColumn Header="Image" Width="100" MinWidth="100">
                            <DataGridTemplateColumn.CellTemplate>
                                <DataTemplate>
                                    <Image
                            Source="{Binding ImageSource}"
                            Width="100"
                            Height="64"
                            Stretch="UniformToFill"
                            VerticalAlignment="Center"
                            HorizontalAlignment="Center"/>
                                </DataTemplate>
                            </DataGridTemplateColumn.CellTemplate>
                        </DataGridTemplateColumn>

                        <!-- (B2) NAME COLUMN (give it a bit more space: 3* instead of 2*) -->
                        <DataGridTextColumn
                Header="Name"
                Binding="{Binding Name}"
                Width="3*"
                MinWidth="200"/>

                        <!-- (B3) TYPE COLUMN (fixed or min width of 80px so “LuxuryCar” doesn’t get truncated) -->
                        <DataGridTextColumn
                Header="Type"
                Binding="{Binding VehicleType}"
                Width="Auto"
                MinWidth="80"/>

                        <!-- (B4) PRICE COLUMN (min width of 80px so “$249.99” always fits) -->
                        <DataGridTextColumn
                Header="Price"
                Binding="{Binding DailyRate.Amount, StringFormat=C}"
                Width="Auto"
                MinWidth="80"/>

                        <!-- (B5) STATUS COLUMN (min width of 100px for “Not Available” or “Rented”) -->
                        <DataGridTextColumn
                Header="Status"
                Binding="{Binding DisplayStatus}"
                Width="Auto"
                MinWidth="100"/>

                        <!-- (B6) RENT NOW BUTTON COLUMN (min width so the button never gets cut off) -->
                        <DataGridTemplateColumn Header="Action" Width="120" MinWidth="120">
                            <DataGridTemplateColumn.CellTemplate>
                                <DataTemplate>
                                    <Button
                            Content="Rent Now"
                            Width="100"
                            Height="28"
                            VerticalAlignment="Center"
                            Style="{StaticResource PrimaryButton}"
                            Command="{Binding DataContext.RentNowCommand, 
                                              RelativeSource={RelativeSource AncestorType=UserControl}}"
                            CommandParameter="{Binding}">
                                        <!-- Disable if not available -->
                                        <Button.IsEnabled>
                                            <Binding Path="CurrentlyAvailable"/>
                                        </Button.IsEnabled>
                                    </Button>
                                </DataTemplate>
                            </DataGridTemplateColumn.CellTemplate>
                        </DataGridTemplateColumn>

                        <!-- (B7) LEARN MORE BUTTON COLUMN (min width so “Learn More” never wraps) -->
                        <DataGridTemplateColumn Header="Details" Width="120" MinWidth="120">
                            <DataGridTemplateColumn.CellTemplate>
                                <DataTemplate>
                                    <Button
                            Content="Learn More"
                            Width="100"
                            Height="28"
                            VerticalAlignment="Center"
                            Style="{StaticResource SecondaryButton}"
                            Command="{Binding DataContext.LearnMoreCommand, 
                                              RelativeSource={RelativeSource AncestorType=UserControl}}"
                            CommandParameter="{Binding}" />
                                </DataTemplate>
                            </DataGridTemplateColumn.CellTemplate>
                        </DataGridTemplateColumn>
                    </DataGrid.Columns>
                </DataGrid>

                <!-- ────────── (2C) REFRESH BUTTON (INSIDE CARD) ────────── -->
                <Button
                    Grid.Row="2"
                    Content="Refresh"
                    Command="{Binding RefreshCommand}"
                    Style="{StaticResource SecondaryButton}"
                    HorizontalAlignment="Right"
                    Padding="8,4"
                    Width="100" />
            </Grid>
        </Border>
    </Grid>
</UserControl>
